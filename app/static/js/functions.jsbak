var escapeElement = document.createElement('textarea');

function htmlEscape(toClean) {
	escapeElement.textContent = toClean;
	return escapeElement.innerHTML;
}

function htmlUnescape(toClean) {
	escapeElement.innerHTML = toClean;
	return escapeElement.textContent;
}

function initVertices(board, radius, xOffset, yOffset) {
    var tHeight = Math.sqrt(Math.pow(radius, 2) - Math.pow(radius*0.5, 2));


    for(var i = 0; i < board.fields.length; i++) {
        field = board.fields[i];
        
        centralX = xOffset + field.col * 2 * tHeight;
        if(field.row % 2 == 1) {
            centralX += tHeight;
        }
        centralY = yOffset + field.row * radius * 1.5;

        vertices = [{x: centralX - tHeight, y: centralY - 0.5 * radius},
                    {x: centralX, y: centralY - radius},
                    {x: centralX + tHeight, y: centralY - 0.5 * radius},
                    {x: centralX + tHeight, y: centralY + 0.5 * radius},
                    {x: centralX, y: centralY + radius},
                    {x: centralX - tHeight, y: centralY + 0.5 * radius}];
        board.fields[i].vertices = vertices;
    }
}

function drawBoard(board) {
    for(var i = 0; i < board.fields.length; i++) {
        drawField(board.fields[i].vertices, board.fields[i].img_src);
    }
    fillWithImages(board);
}

function drawField(vertices, img_src) {
    var ctx = document.getElementById("myCanvas").getContext("2d");

    // ctx.fillStyle = "#000000";
    ctx.strokeStyle = "#000000";
    ctx.lineWidth = 1;

    ctx.beginPath();
    ctx.moveTo(vertices[0].x, vertices[0].y);
    for(var i = 1; i < vertices.length; i++) {
        ctx.lineTo(vertices[i].x, vertices[i].y);
    }
    ctx.closePath();
    ctx.stroke();
    // ctx.fill();
}

function fillWithImages(board) {
    console.log("Bleh");
    var ctx = document.getElementById("myCanvas").getContext("2d");
    var img = new Image();
    
    img.onload = function() {
        var minX = 9999, minY = 9999, maxX = 0, maxY = 0;
        var vertices;

        console.log("Blah");
        for(var i = 0; i < board.fields.length; i++) {
            minX = minY = 9999;
            maxX = maxY = 0;
            vertices = board.fields[i].vertices;

            ctx.save();
            ctx.beginPath();
            ctx.moveTo(vertices[0].x, vertices[0].y);
            for(var j = 1; j < vertices.length; j++) {
                ctx.lineTo(vertices[j].x, vertices[j].y);
                minX = Math.min(minX, vertices[j].x);
                minY = Math.min(minY, vertices[j].y);
                maxX = Math.max(maxX, vertices[j].x);
                maxY = Math.max(maxY, vertices[j].y);
            }
            ctx.clip();
            console.log(minX + ", " + minY + ", " + (maxX - minX) + ", " + (maxY - minY));
            ctx.drawImage(img, minX, minY, maxX - minX, maxY - minY);
            ctx.restore();
        }
    }
    img.src = board.fields[0].img_src;
}

/* Performs ray-casting from the point to the right
 * If the ray crosses an odd number of edges, the point is in
 */
function pointIsInField(point, field) {
    var isInside = false;
    var i = 0, j = field.vertices.length - 1;

    // Check all edges
    for (i, j; i < field.vertices.length; j = i++) {
        // First checks if the point is in the y-scope of this edge
        // Then checks if the point lies to the left of this edge
        if ((field.vertices[i].y > point.y) != (field.vertices[j].y > point.y) &&
            point.x < (field.vertices[j].x - field.vertices[i].x) * (point.y - field.vertices[i].y) / (field.vertices[j].y - field.vertices[i].y) + field.vertices[i].x ) {
            isInside = !isInside;
        }
    }
    return isInside;
}