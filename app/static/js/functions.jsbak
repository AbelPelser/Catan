var escapeElement = document.createElement('textarea');

function htmlEscape(toClean) {
	escapeElement.textContent = toClean;
	return escapeElement.innerHTML;
}

function htmlUnescape(toClean) {
	escapeElement.innerHTML = toClean;
	return escapeElement.textContent;
}

function initVertices(board, radius, xOffset, yOffset) {
    var tHeight = Math.sqrt(Math.pow(radius, 2) - Math.pow(radius*0.5, 2));


    for(var i = 0; i < board.fields.length; i++) {
        field = board.fields[i];

        centralX = xOffset + field.col * 2 * tHeight;
        if(field.row % 2 == 1) {
            centralX += tHeight;
        }
        centralY = yOffset + field.row * radius * 1.5;

        vertices = [{x: centralX, y: centralY + radius},
                    {x: centralX - tHeight, y: centralY + 0.5 * radius},
                    {x: centralX - tHeight, y: centralY - 0.5 * radius},
                    {x: centralX, y: centralY - radius},
                    {x: centralX + tHeight, y: centralY - 0.5 * radius},
                    {x: centralX + tHeight, y: centralY + 0.5 * radius}];
        board.fields[i].vertices = vertices;
    }
}

function drawBoard(board) {
    var field;

    drawFieldBorders(board);
    loadImages(board, 0);
}

function drawFieldBorders(board) {
    var field;

    for(var i = 0; i < board.fields.length; i++) {
        field = board.fields[i];
        drawFieldBorder(field.vertices, field.bordercolor);
    }
}

function drawFieldBorder(vertices, bordercolor) {
    // Draw a line around the hexagon
    ctx.beginPath();
    ctx.moveTo(vertices[0].x, vertices[0].y);
    for(var i = 1; i < vertices.length; i++) {
        ctx.lineTo(vertices[i].x, vertices[i].y);
    }
    ctx.closePath();

    ctx.strokeStyle = "#f6edc4";
    ctx.lineWidth = 3;
    ctx.stroke();
    // ctx.strokeStyle = "#000000";
    // ctx.lineWidth = 1;
    ctx.stroke();
}


// stretchPixels = the number of extra pixels to be clipped on each side of the images
function loadImages(board, stretchPixels) {
    var imgSources = [];
    var img_src, imgObj;

    // Collect the various images to be loaded
    for(var i = 0; i < board.fields.length; i++) {
        img_src = board.fields[i].img_src;
        if(imgSources.indexOf(img_src) == -1) {
            imgSources.push(img_src);
        }
    }

    // For each image, draw it in every field that requires it
    for(var i = 0; i < imgSources.length; i++) {
        imgObj = new Image();
        imgObj.src = imgSources[i];
        imgObj.onload = function() {
            var minX, minY, maxX, maxY;
            var vertices;

            // Iterate over all fields, check which image they need
            for(var j = 0; j < board.fields.length; j++) {
                // this.src is absolute, field.img_src is relative, hence this split is needed
                if(board.fields[j].img_src.split("static")[1] == this.src.split("static")[1]) {
                    minX = minY = 9999;
                    maxX = maxY = 0;
                    vertices = board.fields[j].vertices;
                    // Redefine this field's path, collect the offsets and sizes needed to draw and scale the image
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(vertices[0].x, vertices[0].y);
                    for(var k = 1; k < vertices.length; k++) {
                        ctx.lineTo(vertices[k].x, vertices[k].y);
                        minX = Math.min(minX, vertices[k].x);
                        minY = Math.min(minY, vertices[k].y);
                        maxX = Math.max(maxX, vertices[k].x);
                        maxY = Math.max(maxY, vertices[k].y);
                    }
                    // Make sure we don't draw past this field's border
                    ctx.clip();
                    ctx.drawImage(this, minX - stretchPixels, minY - stretchPixels, maxX - minX + 2 * stretchPixels, maxY - minY + 2 * stretchPixels);
                    // 'unclip' to the saved state
                    ctx.restore();
                }
            }
            drawFieldBorders(board);
        }
    }
}


function drawRoads(board) {
    var field, pointA, pointB, road;

    for(var i = 0; i < board.roads.length; i++) {
        // For each road, find out which field it belongs to
        road = board.roads[i];
        field = undefined;
        for(var j = 0; j < board.fields.length; j++) {
            if(board.fields[j].id == road.fieldId) {
                field = board.fields[j];
                break;
            }
        }
        if(field == undefined) {
            console.log("Invalid fieldId found for road: " + board.roads[i].fieldId);
            continue;
        }
        // Find the two points that are connected by this road's edge
        pointA = {x: field.vertices[road.side].x, y: field.vertices[road.side].y};
        pointB = {x: field.vertices[(road.side + 1) % 6].x, y: field.vertices[(road.side + 1) % 6].y};
        drawRoad(pointA, pointB, road.player);
    }
}

function drawRoad(pointA, pointB, playerColor) {
    var angle = 0;
    var location = {x: (pointA.x + pointB.x) / 2, y: (pointA.y + pointB.y) / 2};
    var width = Math.sqrt(Math.pow(Math.abs(pointB.x - pointA.x), 2) + Math.pow(Math.abs(pointB.y - pointA.y), 2));
    // 1: Extract the two points the road 'connects'
    // 2: Formula for determining the angle
    // 3: Draw at correct position

    if(pointA.x == pointB.x) {
        angle = Math.PI / 2;
    } else {
        angle = Math.atan((pointB.y - pointA.y) / (pointB.x - pointA.x));
    }
    console.log("Rotating " + angle * 180 / Math.PI + " degrees");
    ctx.save();
    ctx.rotate(angle);
    ctx.fillStyle = playerColor;
    ctx.fillRect(location.x - width / 2, location.y - width / 20, width, width / 10);
    ctx.restore();
}

/* Performs ray-casting from the point to the right
 * If the ray crosses an odd number of edges, the point is in
 */
function pointIsInField(point, field) {
    var isInside = false;
    var i = 0, j = field.vertices.length - 1;

    // Check all edges
    for (i, j; i < field.vertices.length; j = i++) {
        // First checks if the point is in the y-scope of this edge
        // Then checks if the point lies to the left of this edge
        if ((field.vertices[i].y > point.y) != (field.vertices[j].y > point.y) &&
            point.x < (field.vertices[j].x - field.vertices[i].x) * (point.y - field.vertices[i].y) / (field.vertices[j].y - field.vertices[i].y) + field.vertices[i].x ) {
            isInside = !isInside;
        }
    }
    return isInside;
}